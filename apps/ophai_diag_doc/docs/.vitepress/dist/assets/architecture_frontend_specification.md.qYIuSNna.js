import{_ as i,c as a,o as n,a_ as t}from"./chunks/framework.C_MVKo3o.js";const g=JSON.parse('{"title":"代码规范体系","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/frontend/specification.md","filePath":"architecture/frontend/specification.md"}'),l={name:"architecture/frontend/specification.md"};function p(e,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="代码规范体系" tabindex="-1">代码规范体系 <a class="header-anchor" href="#代码规范体系" aria-label="Permalink to &quot;代码规范体系&quot;">​</a></h1><p>当前工程已建立较好的基础规范体系：</p><ul><li>类型系统覆盖率 <strong>85%+</strong>（通过TS类型定义）</li><li>样式复用率 <strong>90%+</strong>（通过Sass变量系统）</li><li>组件开发规范度 <strong>100%</strong>（统一使用组合式API）</li><li>代码风格统一（统一使用ESLint）</li><li>代码注释规范（统一使用JSDoc）</li></ul><h2 id="一、eslint规范-工程化基石" tabindex="-1">一、ESLint规范（工程化基石） <a class="header-anchor" href="#一、eslint规范-工程化基石" aria-label="Permalink to &quot;一、ESLint规范（工程化基石）&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 全局忽略文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Vue 文件配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rules: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eslintPluginVue.configs[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue3-recommended&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&#39;vue/multi-word-component-names&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warn&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// TypeScript 文件配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rules: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eslintPluginTypeScript.configs.recommended.rules,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&#39;@typescript-eslint/no-unused-vars&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p><strong>核心优势：</strong></p><ol><li><strong>分层治理：</strong> 按文件类型（Vue/TS/JS）差异化配置，实现精准管控</li><li><strong>渐进增强：</strong> 从warning到error的梯度规则，平衡开发效率与代码质量</li><li><strong>自动修复：</strong> 支持--fix自动修复<strong>70%+常见问题</strong>（如引号/缩进问题）</li></ol><h2 id="二、typescript规范-类型安全长城" tabindex="-1">二、TypeScript规范（类型安全长城） <a class="header-anchor" href="#二、typescript规范-类型安全长城" aria-label="Permalink to &quot;二、TypeScript规范（类型安全长城）&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HistoryCase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  caseId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  createDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  updateDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  diseaseTypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  diagStatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PatientInfoViewObj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  gender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  historyCases</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HistoryCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>核心优势：</strong></p><ol><li><strong>防御性编程：</strong> 85%+类型覆盖率拦截潜在类型错误（相比JS项目错误<strong>减少60%+</strong>）</li><li><strong>文档即代码：</strong> 类型定义自动生成API文档（通过TSDoc注释）</li><li><strong>架构隔离：</strong> 严格区分DTO（接口传输）/VO（视图展示）类型，避免数据污染</li></ol><h2 id="三、sass规范-可扩展样式体系" tabindex="-1">三、Sass规范（可扩展样式体系） <a class="header-anchor" href="#三、sass规范-可扩展样式体系" aria-label="Permalink to &quot;三、Sass规范（可扩展样式体系）&quot;">​</a></h2><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ( </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 尺寸阶梯化定义</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  xxs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  xs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ······更多尺寸</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>核心优势：</strong></p><ol><li><strong>科学配色：</strong> 基于<code>色阶算法</code>生成系统化颜色变量（减少主观设计偏差）</li><li><strong>响应式阶梯：</strong> font-size尺寸映射表等实现<strong>全局样式控制</strong>（改样式只需调整映射表）</li><li><strong>原子CSS：</strong> 通过@each循环生成工具类，<strong>提升样式复用率至90%+</strong></li></ol><h2 id="四、组件规范-现代化开发模式" tabindex="-1">四、组件规范（现代化开发模式） <a class="header-anchor" href="#四、组件规范-现代化开发模式" aria-label="Permalink to &quot;四、组件规范（现代化开发模式）&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 统一使用组合式API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useBulkPreview } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/features/fu/hooks/useBulkPreview&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bulkMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useBulkPreview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>核心优势：</strong></p><ol><li><strong>逻辑解耦：</strong> UI与业务逻辑分离，组件文件体积<strong>平均减少40%</strong></li><li><strong>复用革命：</strong> hooks跨组件复用能力<strong>大幅提升</strong>（相比Options API）</li><li><strong>类型推导：</strong> 组合式API完美支持TS类型推导，VSCode智能提示<strong>准确率90%</strong></li></ol><h2 id="五、目录结构-模块化典范" tabindex="-1">五、目录结构（模块化典范） <a class="header-anchor" href="#五、目录结构-模块化典范" aria-label="Permalink to &quot;五、目录结构（模块化典范）&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/</span></span>
<span class="line"><span>  features/</span></span>
<span class="line"><span>    [feature-name]/</span></span>
<span class="line"><span>      components/   // 通用组件</span></span>
<span class="line"><span>      hooks/        // 自定义Hook</span></span>
<span class="line"><span>      store/        // 状态管理</span></span>
<span class="line"><span>      types/        // 类型定义</span></span>
<span class="line"><span>      index.ts      // 模块入口</span></span>
<span class="line"><span>      router.ts     // 路由配置</span></span>
<span class="line"><span>      ...           // 其他业务相关文件</span></span></code></pre></div><p><strong>核心优势：</strong></p><ol><li><strong>核心业务隔离：</strong> 每个feature独立闭环开发，降低功能耦合度</li><li><strong>微前端就绪：</strong> 目录结构天然支持模块独立部署（未来可改造成微前端模块）</li><li><strong>依赖治理：</strong> 通过index.ts统一出口，控制模块访问权限（import路径<strong>减少30%</strong>）</li></ol><h2 id="六、命名规范-语义化革命" tabindex="-1">六、命名规范（语义化革命） <a class="header-anchor" href="#六、命名规范-语义化革命" aria-label="Permalink to &quot;六、命名规范（语义化革命）&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 亮点：三维命名体系</span></span>
<span class="line"><span>useCaseListStore // 业务语义+技术类型+结构标识</span></span></code></pre></div><p><strong>核心优势：</strong></p><table tabindex="0"><thead><tr><th>规范维度</th><th>典型示例</th><th>核心价值</th></tr></thead><tbody><tr><td><strong>技术特征</strong></td><td><code>useXxx</code>/<code>XxxStore</code></td><td>从名称识别技术类型（Hook/Store）</td></tr><tr><td><strong>业务语义</strong></td><td><code>CaseList</code>/<code>BulkPreview</code></td><td>无需注释即知业务场景</td></tr><tr><td><strong>结构关系</strong></td><td><code>history-diag__item</code></td><td>BEM命名反映DOM层级结构</td></tr></tbody></table><p><strong>附加优势：</strong></p><ol><li><strong>搜索优化：</strong> <code>PascalCase/camelCase</code>分类搜索效率<strong>提升50%+</strong></li><li><strong>新人指引：</strong> 命名规范作为<code>&quot;活文档&quot;</code>，降低项目熟悉成本</li><li><strong>国际化：</strong> 纯英文命名避免编码问题，支持多语言团队协作</li></ol>`,29)]))}const c=i(l,[["render",p]]);export{g as __pageData,c as default};
