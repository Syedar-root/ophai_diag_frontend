import{C as c,b as _,o as a,w as i,G as l,j as n,c as t,F as d,B as u,t as h,a_ as k,a as g}from"./chunks/framework.C_MVKo3o.js";const f="/doc/assets/Arch.Zvt-sahK.png",v={__name:"archTable",setup(m){const r=[{state:"原型期",mode:"MVC架构",shortcoming:["组件耦合 78%；复用率＜20%；"],solution:["拆分为 3 模块；Vue3 组合式 API 解耦；TS 类型（35%）"]},{state:"重构期",mode:"模块化架构",shortcoming:["跨模块通信链长 4.2；TS 覆盖率 65%；工具重复 41%"],solution:["TS 覆盖率 100%；建 libs 共享层；Eslint 代码规范 + Vitest 单元测试"]},{state:"工程化期",mode:"Monorepo",shortcoming:["全量构建 8.2min；依赖重复 23%；配置不一致 68%"],solution:["pnpm workspace 管理；抽象基础配置；独立 CLI；微前端准备理"]}];return(s,P)=>{const p=c("el-table-column"),b=c("el-table");return a(),_(b,{data:r,border:""},{default:i(()=>[l(p,{prop:"state",label:"阶段"}),l(p,{prop:"mode",label:"架构模式"}),l(p,{prop:"shortcoming",label:"痛点"},{default:i(({row:o})=>[n("ul",null,[(a(!0),t(d,null,u(o.shortcoming,e=>(a(),t("li",{key:e},h(e),1))),128))])]),_:1}),l(p,{prop:"solution",label:"解决方案"},{default:i(({row:o})=>[n("ul",null,[(a(!0),t(d,null,u(o.solution,e=>(a(),t("li",{key:e},h(e),1))),128))])]),_:1})]),_:1})}}},T=JSON.parse('{"title":"工程架构设计","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/frontend/architecture.md","filePath":"architecture/frontend/architecture.md"}'),x={name:"architecture/frontend/architecture.md"},q=Object.assign(x,{setup(m){return(r,s)=>(a(),t("div",null,[s[0]||(s[0]=n("h1",{id:"工程架构设计",tabindex:"-1"},[g("工程架构设计 "),n("a",{class:"header-anchor",href:"#工程架构设计","aria-label":'Permalink to "工程架构设计"'},"​")],-1)),s[1]||(s[1]=n("h2",{id:"架构演进三阶段",tabindex:"-1"},[g("架构演进三阶段 "),n("a",{class:"header-anchor",href:"#架构演进三阶段","aria-label":'Permalink to "架构演进三阶段"'},"​")],-1)),l(v),s[2]||(s[2]=k(`<h2 id="项目结构展示" tabindex="-1">项目结构展示 <a class="header-anchor" href="#项目结构展示" aria-label="Permalink to &quot;项目结构展示&quot;">​</a></h2><p>web端项目结构大致分为三个部分：</p><ul><li>libs：存放公共的库，如api、router、store等</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  libs</span></span>
<span class="line"><span>    ├── api     # 通用request请求工具</span></span>
<span class="line"><span>    ├── router  # 主路由管理</span></span>
<span class="line"><span>    ├── store   # 全局状态管理</span></span>
<span class="line"><span>    └── utils   # 通用工具库</span></span></code></pre></div><ul><li>features：存放功能模块，如cm、dd、fu等</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>features</span></span>
<span class="line"><span>├── cm</span></span>
<span class="line"><span>│   ├── api         # 模块api（依赖于通用request请求工具）</span></span>
<span class="line"><span>│   ├── components  # 功能模块组件</span></span>
<span class="line"><span>│   ├── hooks       # 模块内可复用hooks</span></span>
<span class="line"><span>│   ├── index.vue   # 模块子视图</span></span>
<span class="line"><span>│   ├── router.ts   # 模块路由管理</span></span>
<span class="line"><span>│   ├── store       # 模块内状态管理（可用于组件间通信）</span></span>
<span class="line"><span>│   ├── styles.scss</span></span>
<span class="line"><span>│   └── types       # 模块内类型定义</span></span>
<span class="line"><span>├── dd</span></span>
<span class="line"><span>└── fu</span></span></code></pre></div><ul><li>shared：存放共享组件，如assets、components、layout等</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>shared</span></span>
<span class="line"><span>├── assets</span></span>
<span class="line"><span>│   ├── font</span></span>
<span class="line"><span>│   ├── icons</span></span>
<span class="line"><span>│   ├── logo</span></span>
<span class="line"><span>│   ├── styles</span></span>
<span class="line"><span>├── components</span></span>
<span class="line"><span>│   ├── business    # 业务组件</span></span>
<span class="line"><span>│   └── common      # 通用组件</span></span>
<span class="line"><span>└── layout          # 布局组件</span></span>
<span class="line"><span>    └── index.vue</span></span></code></pre></div><p>同时在完整项目上采用了<code>monorepo</code>架构模式，将所有的项目都放在一个仓库中，这样可以方便管理和维护。</p><p>项目目录大致如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ophai_diag_frontend</span></span>
<span class="line"><span>├── Dockerfile</span></span>
<span class="line"><span>├── apps                # 应用层，存放各个应用的代码</span></span>
<span class="line"><span>├── core                # 核心层，存放公共的配置</span></span>
<span class="line"><span>├── default.conf</span></span>
<span class="line"><span>├── eslint.config.js</span></span>
<span class="line"><span>├── node_modules</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── packages            # 包管理层，存放各个本地依赖包（通用工具库，品牌UI组件库）</span></span>
<span class="line"><span>└── pnpm-workspace.yaml</span></span></code></pre></div><h2 id="系统架构设计" tabindex="-1">系统架构设计 <a class="header-anchor" href="#系统架构设计" aria-label="Permalink to &quot;系统架构设计&quot;">​</a></h2><p><img src="`+f+'" alt="系统架构图"></p><h3 id="视图容器层" tabindex="-1">视图容器层 <a class="header-anchor" href="#视图容器层" aria-label="Permalink to &quot;视图容器层&quot;">​</a></h3><ul><li><strong>主布局视图：</strong> 作为单页应用（SPA）的基础框架，根据模块需求动态加载对应的子视图，构成用户最终看到的界面结构。</li></ul><h3 id="核心业务层" tabindex="-1">核心业务层 <a class="header-anchor" href="#核心业务层" aria-label="Permalink to &quot;核心业务层&quot;">​</a></h3><ul><li><strong>路由系统：</strong><ul><li><strong>主路由：</strong> 掌控整体导航流程，协调不同模块的路由配置。</li><li><strong>子路由：</strong> 进一步细分页面路径，精准定位到具体的子视图（各个页面）。</li></ul></li><li><strong>业务逻辑单元：</strong><ul><li><strong>组件：</strong> 页面构成的基本单元，具备复用性。</li><li><strong>Hooks：</strong> 封装可复用的逻辑，提升代码灵活性与复用性。</li><li><strong>Store：</strong> 集中管理应用状态，确保多组件间数据的统一与共享。</li><li><strong>参数验证：</strong> 使用封装后<code>Joi-validate</code> 工具，对输入数据进行模块特性合法性校验。</li><li><strong>API Gateway：</strong> 统一管理API请求，封装请求逻辑，简化开发流程。</li></ul></li><li><strong>事件中心：</strong> 通过<strong>事件中心</strong>实现组件间的事件通信，解耦复杂的业务逻辑。</li><li><strong>辅助功能模块：</strong><ul><li>右侧独立区域包含<strong>全局样式</strong>（统一应用整体风格）、<strong>通用 UI 组件</strong>（提升开发效率，减少重复开发）、<strong>覆盖 Element 样式</strong>（对第三方组件进行定制）等。</li><li><strong>Joi 验证工具、request 请求工具</strong>等，为数据验证与网络请求提供支持，确保数据交互的准确性与稳定性。</li></ul></li></ul><h3 id="network-层" tabindex="-1">Network 层 <a class="header-anchor" href="#network-层" aria-label="Permalink to &quot;Network 层&quot;">​</a></h3><ul><li>专注于网络通信，使用<strong>GET、PUT、POST</strong>等常见的 HTTP 请求方法，是前端与后端服务器进行数据交互的桥梁，负责数据的发送与接收。</li></ul><h3 id="代理层" tabindex="-1">代理层 <a class="header-anchor" href="#代理层" aria-label="Permalink to &quot;代理层&quot;">​</a></h3><ul><li>采用<code>Nginx</code>作为代理服务器，主要承担请求转发、缓存处理等任务，优化网络请求性能，同时增强应用的安全性与稳定性，例如处理跨域请求、负载均衡等。</li></ul>',21))]))}});export{T as __pageData,q as default};
